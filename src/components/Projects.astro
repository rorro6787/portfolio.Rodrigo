---
import GitHub from "./icons/GitHub.astro"
import ORACLE from "./icons/Oracle.astro"
import MAIL from "./icons/System.astro"
import Pytorch from "./icons/Pytorch.astro"
import Python from "./icons/Python.astro"
import Link from "./icons/Link.astro"
import LinkButton from "./LinkButton.astro"
import Numpy from "./icons/Numpy.astro"
import Yolo from "./icons/Yolo.astro"
import HuggingFace from "./icons/HuggingFace.astro"
import Next from "./icons/Next.astro"
import type { preview } from "astro"

const TAGS = {
  Oracle: {
    name: "Oracle Cloud Infrastucture",
    class: "bg-[#003159] text-white",
    icon: ORACLE,
  },
  Next: {
    name: "React & Next.js",
    class: "bg-[#003159] text-white",
    icon: Next,
  },
  PYTHON: {
    name: "Python",
    class: "bg-[#003159] text-white",
    icon: Python,
  },
  PYTORCH: {
    name: "Pytorch",
    class: "bg-[#003159] text-White",
    icon: Pytorch,
  },
  NUMPY: {
    name: "Numpy",
    class: "bg-[#003159] text-White",
    icon: Numpy,
  },
  YOLO: {
    name: "YOLOv8",
    class: "bg-[#003159] text-White",
    icon: Yolo,
  },
  HUGGINGFACE: {
    name: "HuggingFace",
    class: "bg-[#003159] text-White",
    icon: HuggingFace,
  },
}

const PROJECTS = [
  {
    title: "OCI Powered Intelligent Water Dam-Monitoring Application",
    description: "This project leverages Oracle Cloud to provide historical data and 5-year water level predictions for Spanish dams. It includes a React/Next.js frontend, a Python Flask server with an ARIMA model, and security features like reCAPTCHA and TLS.",
    preview: "https://hackaton-knkj.vercel.app/",
    github: "https://github.com/rorro6787/OCI-Powered-Intelligent-Water-Dam-Monitoring-Application/tree/delta",
    image: "/projects/dams.webp",
    tags: [TAGS.Oracle, TAGS.PYTHON, TAGS.Next],
  },
  {
    title: "Maliocious Mail Detector using Llama2", 
    description: "A Pytorch system capable of detecting malicious emails with exceptional precision using a fine-tunned Llama2 model. The app is served via a Flask server and fully containerized with Docker.",
    link: "https://github.com/rorro6787/malicious-mail-detector/blob/main/Project_Documentation.pdf",
    github: "https://github.com/rorro6787/malicious-mail-detector",
    image: "/projects/resBueno.webp",
    tags: [TAGS.PYTORCH, TAGS.HUGGINGFACE],
  },
  {
    title: "Rock Paper Scissors Image Tracker",
    description: "Python implementation that trains a computer vision model using YOLOv8 to detect hands in the shapes of rock, paper, or scissors. The system determines the outcome of the game. It covers everything from dataset generation to model training",
    link: "https://github.com/rorro6787/ImageTracking/blob/gamma/Image_Tracking_YOLO.pdf",
    github: "https://github.com/rorro6787/ImageTracking",
    image: "/projects/game.webp",
    tags: [TAGS.PYTORCH, TAGS.YOLO],
  },
  {
    title: "Image Descriptor for Visually Impaired",
    description: "A Python + Pytorch + Tensorflow app that uses YOLO for entity detection, MiDaS for depth mapping, and k-means for inferring weather and predominant color in an image. LangChain passes this data to an LLM, which generates an image description. The app is served via a Flask server and fully containerized with Docker.",
    link: "https://github.com/rorro6787/img-desc-visually-impaired/blob/main/Project_Documentation.pdf",
    github: "https://github.com/rorro6787/img-desc-visually-impaired",
    image: "/projects/impaired.webp",
    tags: [TAGS.PYTORCH, TAGS.YOLO],
  },
  {
    title: "My Neural Network from Scratch",
    description: "Python implementation of a neural network that covers basic concepts such as forward propagation, backpropagation, and training using gradient descent. Basic Python is used without libraries like TensorFlow or PyTorch.",
    link: "https://github.com/rorro6787/NeuralNetwork/blob/main/Neural_Network_Python.pdf",
    github: "https://github.com/rorro6787/NeuralNetwork",
    image: "/projects/network.webp",
    tags: [TAGS.PYTHON, TAGS.NUMPY],
  },
]
---

<div class="flex flex-col gap-y-16">
  {
    PROJECTS.map(({ image, title, description, tags, link, github, preview }) => (
    <article class="flex flex-col space-x-0 space-y-8 group md:flex-row md:space-x-8 md:space-y-0">
  <div class="w-full md:w-1/2">
    <div class="relative flex flex-col items-center col-span-6 row-span-5 gap-8 transition duration-500 ease-in-out transform shadow-xl overflow-clip rounded-xl sm:rounded-xl md:group-hover:-translate-y-1 md:group-hover:shadow-2xl lg:border lg:border-gray-800 lg:hover:border-gray-700 lg:hover:bg-gray-800/50">
      <img alt="Recién llegado vs 5 años en Nueva Zelanda" class="object-cover object-top w-full h-56 transition duration-500 sm:h-full md:scale-110 md:group-hover:scale-105" src={image} />
    </div>
  </div>

  <div class="w-full md:w-1/2 md:max-w-lg">
    <h3 class="text-2xl font-bold text-gray-800 dark:text-gray-100">
      {title}
    </h3>
    <div class="flex flex-wrap mt-2">
      <ul class="flex flex-row mb-2 gap-x-2">
          {tags.map((tag) => (
            <li>
              <span
                class={`flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2 `}
              >
                <tag.icon class="size-6" />
                {tag.name}
              </span>
            </li>
          ))}
        </ul>

      <div class="mt-2 text-gray-700 dark:text-gray-400">{description}</div>
      <footer class="flex items-end justify-start mt-4 gap-x-4">
          {github && (
            <LinkButton href={github}>
              <GitHub class="size-6" />
              Code
              
            </LinkButton>
            )}
          {preview && (
            <LinkButton href={preview}>
              <MAIL class="size-6" />
              Preview
              
            </LinkButton>
            )}
          {link && (
            <LinkButton href={link}>
              <Link class="size-6" />
              Docs
            </LinkButton>
          )}
        </footer>
    </div>
  </div>
</article>
    ))
  }
</div>



